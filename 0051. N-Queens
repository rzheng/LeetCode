class Solution {

    public List<List<String>> solveNQueens(int n) {
        return IntStream.range(0, n).boxed().reduce(List.of(List.<Integer>of()), (t, u) -> IntStream.range(0, t.size() * (1 + u)).mapToObj(v -> IntStream.range(0, 1 + u).mapToObj(w -> w < v % (1 + u) ? t.get(v / (1 + u)).get(w) : w > v % (1 + u) ? t.get(v / (1 + u)).get(w - 1) : u).collect(Collectors.toList())).collect(Collectors.toList()), (t, u) -> t).stream().filter(t -> new HashSet(t).size() == n & IntStream.range(0, n).mapToObj(v -> v + t.get(v)).distinct().count() == n & IntStream.range(0, n).mapToObj(v -> v - t.get(v)).distinct().count() == n).map(t -> IntStream.range(0, n).mapToObj(v -> IntStream.range(0, n).mapToObj(w -> w == t.get(v) ? "Q" : ".").collect(Collectors.joining())).collect(Collectors.toList())).collect(Collectors.toList());
    }
}
